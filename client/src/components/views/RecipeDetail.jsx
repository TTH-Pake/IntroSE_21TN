/* eslint-disable no-unused-vars */
import React from "react";
import NavBar from '../modules/Navbar.jsx';
import Footer from "../modules/Footer";
import { useLocation, useNavigate } from "react-router-dom";
import { handleSearchRecipesID } from "../../action/recipesAction";
import Loading from "../modules/Loading";
import Clock from "/src/assets/clock.png";
import chatIcon from "/src/assets/chat.png";
import avatarIcon from "/src/assets/avatar.png";
import SendIcon from '/src/assets/send.png';
import Bookmark from "/src/assets/bookmark.png";
import Share from "/src/assets/share.png";
import "./Profile.css";
import axios from "axios";
import { message } from "antd";
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import StarRatings from 'react-star-ratings';

export const RecipeDetail = () => {

  const comments = [
    {
      user: "C√¥ Ba",
      comment: "Ngon v√£i lu√¥n √Ω, ch·ªìng em ƒÉn c·ª© t·∫•m t·∫Øt khen ngon m·∫•y ch·ªã ∆°i üíïüåû‚öò‚ù£üëè",
      rating: 5,
    },
    {
      user: "Anh ƒë·∫πp trai",
      comment: "V·ª´a n·∫•u m√≥n n√†y cho c√¥ ng∆∞·ªùi y√™u ƒÉn, c·ªï khen qu√° tr·ªùi, c·∫£m ∆°n s·ªëp ƒë√£ chia s·∫ª c√¥ng th·ª©c nhi·ªÅu nhen  ü•∞ü•∞üíñüíñüôåüèª",
      rating: 4,
    },
    {
      user: "Ch·ªã T∆∞ b√°n h·ªß ti·∫øu",
      comment: "√ä ngon thi·ªát b√¢y ∆°i, tao ƒÉn c√≤n ghi·ªÅn n·ªØa n√≥i chi m·∫•y ƒë·ª©a nh·ªè, ri·∫øt t·ª•i n√≥ k√™u tao b·ªè b√°n h·ªß ti·∫øu chuy·ªÉn qua b√°n c√°i n√†y kh√¥ng ƒë√≥",
      rating: 4.5,
    },
    {
      user: "√îng nƒÉm kh√≥ t√≠nh",
      comment: "T·∫°m, kh·∫©u v·ªã c·ªßa t√¥i c·∫ßn g√¨ ƒë√≥ ƒë·∫∑c bi·ªát h∆°n th·∫ø n√†y, n√≥i chung l√† v·∫≠y.",
      rating: 2,
    },
    {
      user: "N√≥i chung l√† slay",
      comment: "Xin l·ªói ch·ªã, xin l·ªói m·ªçi ng∆∞·ªùi,... em l·∫°i nh∆∞ v·∫≠y n·ªØa r·ªìi... Em l·∫°i n·∫•u ngon n·ªØa r·ªìi!!! Ngon vaicut m·∫•y ch·ªã g√°i ∆°i üëâüëà kakaka",
      rating: 5,
    },
  ];



  const navigate = useNavigate();
  const location = useLocation();

  const notify = () => {
    toast.success('ü¶Ñ Save recipes successfull!', {
      position: "bottom-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
    });
  }
  const recipeId = new URLSearchParams(useLocation().search).get("ID");
  const [recipe, setRecipe] = React.useState(null);
  const [loading, setLoading] = React.useState(false);

  const fetchRecipes = async () => {
    await handleSearchRecipesID(recipeId)
      .then((dataGetRecipe) => {
        setRecipe(dataGetRecipe);
        setLoading(true);
      })
      .catch((err) => {
        setRecipe(null);
      });
  };

  if (recipeId) {
    fetchRecipes();
  }

  // Should return error screen
  if (!loading) {
    return (
      <div className="absolute top-1/2 left-1/2">
        <Loading />;
      </div>
    );
  }


  const handleUpdateFavoriteRecipes = async () => {
    try {
      const accessToken = localStorage.getItem("accessToken");

      if (!accessToken) {
        message.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u c√¥ng th·ª©c n√†y.");
        navigate('/login', { state: { from: location } }); // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
        return;
      }

      console.log("accessToken : ", accessToken);
      const result = await axios.post(
        `http://127.0.0.1:8000/users/favourites`,
        { recipeId },
        {
          headers: {
            Authorization: "Bearer " + accessToken,
          },
        }
      );

      if (result.data.success) {
        console.log(result.data);
        return result.data;
      } else {
        message.error(result.data.error);
      }
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <div className="home-wrapper min-h-screen bg-green-200 flex flex-col overflow-y-auto">
      <NavBar />

      <div className="container bg-green-200 mx-auto p-8">
        <div className="text-center">
          {/* Added text-center class */}
          <h1 className="text-4xl font-bold mb-4">{recipe.recipe_name}</h1>
          <img
            src={recipe.img_src}
            alt={recipe.recipe_name}
            className="mb-3 rounded-lg mx-auto max-w-md"
          />
          <div className="flex items-center justify-center">
            <div className="mr-2">
              <StarRatings
                rating={recipe.rating}
                starRatedColor="orange"
                numberOfStars={5}
                name='rating'
                starDimension="20px"
                starSpacing="2px"
              />
            </div>
            <span className="text-sm font-bold">{recipe.rating}</span>
          </div>

          {/* Added mx-auto class */}
        </div>

        <div className="flex justify-center mb-4 mt-3">
          <div className="w-3/4 pr-8">

            <div className="w-full bg-white rounded-md ml-20 py-2 shadow-lg">
              <div className="flex items-center mb-2">
                <h2 className="ml-4 text-2xl font-bold">Nguy√™n li·ªáu</h2>
                <img src={Clock} alt="time" className="h-5 w-5 ml-6 mt-1" />
                <span className="text-gray-700 ml-1 mt-1">
                  {recipe.prep_time}
                </span>
              </div>

              <ul className="ml-8 mt-3 list-inside">
                {recipe.ingredients_list.map((ingredient, index) => (
                  <li key={index} className="mb-2 pb-2">
                    {ingredient.trim()}
                  </li>
                ))}
              </ul>
            </div>

            <div className="w-full pr-5 bg-white rounded-md ml-20 py-2 mt-4 shadow-lg">
              <div className="flex items-center mb-2">
                <h2 className="ml-4 text-2xl font-bold">H∆∞·ªõng d·∫´n n·∫•u n∆∞·ªõng</h2>
                <img src={Clock} alt="time" className="h-5 w-5 ml-6 mt-1" />
                <span className="text-gray-700 ml-1 mt-1">
                  {recipe.cook_time}
                </span>
              </div>

              <div className="ml-8 mb-2 mt-3">
                <ol className="prose prose-blue list-inside">
                  {recipe.directions.split("\n").map((step, index) => (
                    <li key={index} className="mb-2 pb-2">
                      <span className="font-bold">B∆∞·ªõc {index + 1}:</span> {step}
                    </li>
                  ))}
                </ol>
              </div>

            </div>



            <div className="w-3/4 pr-3 bg-white rounded-md ml-20 py-2 mt-4 shadow-lg">
              <div className="flex items-center mb-3">
                <img src={chatIcon} alt="comment" className="h-6 w-6 ml-6" />
                <h2 className="ml-4 text-2xl font-bold">B√¨nh lu·∫≠n</h2>
              </div>
              <div className="ml-8 flex-col items-center">
                {comments.map((comment, index) => (
                  <div key={index} className="mb-2 flex">
                    <img
                      src={avatarIcon}
                      alt="Avatar"
                      className="h-8 w-8 rounded-full mr-3 mt-1"
                    />
                    <div>
                      <p className="font-bold">{comment.user}</p>
                      <p>{comment.comment}</p>
                      {comment.rating && (
                        <p className="text-yellow-600">{`Rating: ${comment.rating}/5`}</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              <div className="ml-3 flex bg-white p-2 mt-2 mb-1 border border-gray-700 rounded-full">
                <input
                  type="text"
                  // value={inputMessage}
                  // onChange={(e) => setInputMessage(e.target.value)}
                  // onKeyDown={handleKeyDown}
                  placeholder="Th√™m b√¨nh lu·∫≠n c·ªßa b·∫°n t·∫°i ƒë√¢y nha..."
                  className="flex-1 outline-none border-none ml-2"
                />
                <button
                  // onClick={handleSendMessage}
                  className="text-black rounded-md mr-2"
                >
                  <img src={SendIcon} alt="send" className="h-4 w-4" />
                </button>
              </div>

            </div>


            {/* <div className="mb-4">
          <h2 className="text-xl font-bold mb-2">Comments</h2>
          {comments.map((comment, index) => (
            <div key={index} className="mb-2">
              <p className="font-bold">{comment.user}</p>
              <p>{comment.comment}</p>
              {comment.rating && (
                <p className="text-yellow-400">{`Rating: ${comment.rating}/5`}</p>
              )}
            </div>
          ))}
        </div> */}



          </div>

          <div className="w-1/4 h-screen ml-20 flex flex-col justify-start">
            <div className="w-72 grid grid-cols-1/4  bg-white border shadow-black rounded-md p-3 space-y-2 shadow-lg">
              <button
                className="text-gray-900 p-1 rounded-md border border-black flex items-center justify-center space-x-2"
                onClick={() => {
                  handleUpdateFavoriteRecipes();
                  notify();
                }}
              >
                <img src={Bookmark} alt="Bookmark Icon" className="h-4 w-4" />
                <span>L∆∞u M√≥n</span>
              </button>
              <ToastContainer
                position="bottom-right"
                autoClose={5000}
                hideProgressBar={false}
                newestOnTop
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="light"
              />

              <button className="text-gray-900 p-1 rounded-md border border-black bg-white flex items-center justify-center space-x-2">
                <img src={Share} alt="Share Icon" className="h-4 w-4" />
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>



      </div>

      <div className="container mx-auto px-4">
        <h2 className="text-2xl font-bold mb-6 ml-4">M·ªôt s·ªë m√≥n ƒÉn li√™n quan</h2>

      </div>

      <Footer />
    </div>
  );
}

export default RecipeDetail;